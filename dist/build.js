(()=>{"use strict";Vue.component("NavMenu",{props:["type","pages","loadData","isMobile"],template:'\n            <ul v-if="type==\'top-menu\'" class="header__menu" v-show="isMobile.menuVisible">\n                <li class="header__menu-item render-main"\n                     v-for="item of pages" @click="openPage(item)" :key="item.name">{{ item.name }}</li>\n            </ul>\n            \n            <div v-else-if="type==\'bradcrumb\'" class="bradcrumb">\n                <div class="bradcrumb__container container">\n                    <div class="bradcrumb__desc">\n                        Интернет-магазин&nbsp;VUE\n                    </div>\n                    <div class="bradcrumb__map"><span class="render-main" @click="openPage(pages[0])">{{ pages[0].name}}</span><span\n                        class="bradcrumb__map_changable">{{ bradcrumb }}</span>\n                    </div>\n                </div>\n            </div>\n            \n            <div v-else-if="type==\'hamburger-icon\'" class="header__hamb" :class="{header__hamb_click:isMobile.menuVisible}"\n                        v-show="isMobile.menuIcon" @click="changeMenuVisible">\n                <span></span><span></span><span></span>\n            </div>\n    ',methods:{openPage(e){switch(this.pages.forEach((t=>{t.active=t.name==e.name?t.active=!0:t.active=!1})),e.name){case"Каталог":this.loadData("/catalog")}},changeMenuVisible:function(){this.isMobile.menuVisible=!this.isMobile.menuVisible}},computed:{bradcrumb:function(){let e=this.pages.find((e=>e.active)).name;return"Главная"!=e?" / "+e:null}}}),Vue.component("searchEq",{props:["goods","filteredGoods"],data:()=>({searchLine:""}),template:'\n            <form  class="header__search" action="#" method="get" name="search" @submit.prevent="filterGoods">\n               <input type="search" value="" placeholder="Товар..." v-model.lazy="searchLine" @change="searchCorrect">\n               <button type="submit">&#128269;</button>\n            </form>\n    ',methods:{searchCorrect(){this.searchLine=this.searchLine.trim().toLowerCase()},filterGoods(){const e=new RegExp(this.searchLine,"i"),t=this.searchLine?this.goods.filter((t=>e.test(t.product_name))):[...this.goods];this.filteredGoods.splice(0,this.filteredGoods.length),t.forEach((e=>this.filteredGoods.push(e)))}}}),Vue.component("errorComp",{props:["errorMessages"],data:()=>({isVisibleErrors:!0}),template:'\n        <div v-if="this.errorMessages.length&&isVisibleErrors" class="errors"  @click="unShowErrors">\n            <div class="errors__caption">Ошибки</div>    \n            <div  class="errors__text" v-for="err of errorMessages">{{err}}</div>\n        </div>\n    ',methods:{unShowErrors(){this.isVisibleErrors=!1}}}),Vue.component("cartItem",{props:["item","errorBox","queryServer"],template:'\n        <div class="cart__element cart__grid">\n            <div class="cart__name">{{item.product_name}}</div>\n            <div class="cart__price">{{item.price}}</div>\n            <input class="cart__quantity" type="number"\n                    @change="e=>{if(e.target.value<=0) {\n                                        $emit(\'remove-cart\',item);\n                                    } else {\n                                        update(item);                                                                                \n                                    }\n                                }"\n                     v-model.lazy="item.quantity">\n            <div class="cart__sum">{{item.price*item.quantity}}</div>\n            <button class="cart__remove" @click="$emit(\'remove-cart\',item)">X</button>\n        </div>\n    ',methods:{update(e){this.queryServer("/addToCart",e).then((t=>{1==t.result||this.errorBox.push(`Ошибка при добавлени/изменении товара ${e.product_name} в корзину`)}))}}}),Vue.component("cart",{props:["icon","cartItems","errorBox","queryServer"],template:'\n            <span v-if="icon" class="header__cart-count">{{cartQuantity}}</span>\n            <div v-else="icon" class="header__cart-body" v-show="$parent.isVisibleCart">\n                <div class="header__cart-top">\n                    <div class="header__cart-header">Корзина</div>\n                     <div class="header__cart-close" @click="$parent.isVisibleCart=false">x</div>\n                </div>\n                <div class="cart__grid cart__grid_top">\n                    <div class="cart__name">Товар</div>\n                    <div class="cart__price">Цена,&#8381;</div>\n                    <div class="cart__quantity">Кол-во</div>\n                    <div class="cart__sum">Сумма,&#8381;</div>\n                    <div class="cart__remove"></div>\n                </div>\n                <div id="cart">\n                <cart-item v-for="item of cartItems" :item="item" :key="item.id_product"\n                            :error-box="errorBox" :query-server="queryServer"\n                            @remove-cart="removeFromCart"></cart-item>     \n                <div v-if="cartItems.length==0">Корзина пуста. Начните покупки >></div>\n                    <div class="cart__total">\n                    <div class="cart__total-head">ИТОГО:</div>\n                    <div class="cart__total-quantity" id="cart__quantity">{{cartQuantity}}шт.</div>\n                    <div class="cart__total-sum" id="cart__total">&#8381;{{cartTotal}}</div>\n                    <div class="cart__total-button" @click="buy">Купить</div>\n                    </div>\n                </div>\n            </div>\n        ',methods:{removeFromCart(e){this.queryServer("/removeFromToCart",e).then((t=>{1==t.result?this.cartItems.forEach(((t,a)=>t.id_product==e.id_product&&this.cartItems.splice(a,1))):this.errorBox.push(`Ошибка при удалении товара ${e.product_name} из корзины`)}))},buy(){alert("Товары направлены на Ваш адрес")}},computed:{cartTotal(){return this.cartItems.reduce(((e,t)=>e+ +t.quantity*t.price),0)},cartQuantity(){return this.cartItems.reduce(((e,t)=>e+ +t.quantity),0)}}}),Vue.component("goodsItem",{props:["product","cartItems","errorBox","queryServer"],template:'\n        <div class="product-item">\n            <div class="product-item-in">\n                <h3 class="product-header">{{product.product_name}}</h3>\n                <div class="product-img">\n                    <img :src="\'img/\'+product.id_product+\'.png\'">\n                </div>\n                <p class="product-price">&#8381;{{product.price}}</p>\n            </div>\n            <div class="product-button">\n                <div class="product-button-buy buy-btn" @click="addcart(product)">\n                    <img src="img/cart.png">\n                    Купить\n                </div>\n            </div>\n        </div>\n    ',methods:{addcart(e){this.queryServer("/addToCart",e).then((t=>{if(1==t.result){let t=this.cartItems.find((t=>e.id_product==t.id_product));t?t.quantity=+t.quantity+1:this.cartItems.push({...e,quantity:1}),alert(`Товар:\n${e.product_name.toUpperCase()}\nдобавлен в корзину`)}else this.errorBox.push(`Ошибка при добавлени товара ${e.product_name} в корзину`)}))}}}),Vue.component("goodsList",{props:["goods","cartItems","errorBox","queryServer"],template:'\n       <div class="product-box" >\n            <goods-item v-for="product of goods" :product="product" :key="product.id_product" \n                            :cart-items="cartItems" :error-box="errorBox" :query-server="queryServer">\n            </goods-item>\n            <div class="product-none" v-if="goods.length==0">Не найдено!</div>\n       </div>\n    '});class e{constructor(e){this.type=e.type,this.label=e.label,this.placeholder=e.placeholder,this.name=e.name}render(){let e;e="textarea"==this.type?`<textarea name="${this.name}" placeholder="${this.placeholder}" wrap="hard"></textarea>`:"submit"==this.type?`<input type="${this.type}" name="${this.name}" placeholder="${this.placeholder}" value="Отправить">`:`<input type="${this.type}" name="${this.name}" placeholder="${this.placeholder}">`;let t=`<img src="img/${this.name}.png" alt="">`;return`\n            <div class="callback__item">\n                ${"submit"!=this.type?t:""}\n                \n                <div>\n                    <span>${this.label}</span>\n                    ${e}\n                </div>\n            </div>\n        `}}class t{constructor(e=".page__content",t,a){this.formElement=this.getFormElement(e),this.inputs=[],this._load(),this.render(),this.queryServer=t,this.errorBox=a}_load(){this.inputs=[{type:"text",name:"userName",label:"Ваше Имя",placeholder:"Ваше Имя",pattern:["^[a-zа-я ]+$","i"]},{type:"tel",name:"phone",label:"Телефон",placeholder:"+7(000)000-00-00",pattern:["^\\+7\\(\\d{3}\\)\\d{3}-\\d{2}-\\d{2}$"]},{type:"text",name:"userEmail",label:"email",placeholder:"box@domain.com",pattern:["^([a-z0-9]+[.-])*[a-z0-9]+@([a-z0-9]+[.-])*[a-z0-9]+[.][a-z]{2,6}$"]},{type:"textarea",name:"message",label:"Ваше сообщение",placeholder:"Введите сообщение",pattern:[".+"]},{type:"submit",name:"button",label:"",placeholder:""}]}render(){for(let t of this.inputs){let a=new e(t).render();this.formElement.insertAdjacentHTML("beforeend",a)}this.formElement.addEventListener("submit",this.checkInputs),this.formElement.phone.addEventListener("keyup",this._phoneCheck)}getFormElement(e){let t=document.createElement("form");return t.classList.add("callback__form"),t.action="#",t.method="GET",t.name="callBack",document.querySelector(e).append(t),t}checkInputs=e=>{e.preventDefault();let t=!0,a={};for(let r of e.target){r.value=r.value.trim();let e=this.inputs.find((e=>e.name==r.name)).pattern;e&&(e=new RegExp(e[0],e[1]),e.test(r.value)?(r.style.boxShadow="none",a[r.name]=r.value):(r.style.boxShadow="0 0 10px red",t=!1))}t&&this._sendCallback(a)};_phoneCheck=e=>{let t=e.target.value.replace(/\+7|\D/g,"").substr(0,10),a="";for(let e in t)a+=t[e],2==e&&(a+=")"),5==e&&(a+="-"),7==e&&(a+="-");e.target.value="+7("+a};_sendCallback(e){this.queryServer("/sendCallBack",e).then((t=>{1==t.result?(document.forms.callBack.reset(),alert("Сообщение доставлено!")):this.errorBox.push(`Ошибка при отправке сообщения ${e.message} пользователя ${e.userName}`)}))}}Vue.component("callBack",{props:["query","errorBox"],template:'\n            <div class="call-back"></div>\n    ',mounted(){new t(".call-back",this.query)}}),Vue.component("hamburger",{template:'\n            <div class="hamburger__content"></div>\n    ',mounted(){new a(".hamburger__content")}});class a{constructor(e){this.options=[],this.renderCaptions(e),this._fetchOptions(),this.renderBox(),this.hamburger=new i}_fetchOptions(){this.options[0]=[{type:"base",name:"small",fullname:"Маленький",price:50,caloricValue:20,checked:!1},{type:"base",name:"big",fullname:"Большой",price:100,caloricValue:40,checked:!0}],this.options[1]=[{type:"fill",name:"cheese",fullname:"Сыр",price:10,caloricValue:20,checked:!0},{type:"fill",name:"salad",fullname:"Салат",price:20,caloricValue:5,checked:!1},{type:"fill",name:"potato",fullname:"Картофель",price:15,caloricValue:10,checked:!1}],this.options[2]=[{type:"adds",name:"spice",fullname:"Перец",price:15,caloricValue:0,checked:!1},{type:"adds",name:"mainonaise",fullname:"Майонез",price:20,caloricValue:5,checked:!1}]}renderCaptions(e){let t=document.querySelector(e);this.container=document.createElement("form"),this.container.name="hamb",this.container.classList.add("hamburger__container"),t.insertAdjacentHTML("beforeend",'\n                        <div class="hamburger__desc">\n                            Сформируй свой бургер<span>&dArr;</span>\n                        </div>'),t.insertAdjacentElement("beforeend",this.container),t.insertAdjacentHTML("beforeend",'\n                        <div class="hamburger__total">\n                            <div class="hamburger__total-price">Итого: <span id="totalPrice"></span> </div>\n                            <div class="hamburger__total-calories">Калорий: <span id="totalCalories"></span></div>\n                            <div class="hamburger__total-order">Заказать</div>\n                        </div>'),document.querySelector(".hamburger__total-order").addEventListener("click",this.order)}renderBox(){for(let e in this.options){let t=document.createElement("div");t.classList.add("hamburger__group"),this.container.append(t);for(let a of this.options[e]){let e=new r(a).getElement();t.insertAdjacentElement("beforeend",e),e.addEventListener("change",(()=>{this.hamburger=new i})),e.addEventListener("click",this.changeInput)}}}order=e=>{let t=this.hamburger;alert(`Заказ принят!\n----------------------\nГамбургер: ${t.base}\nнаполнитель: ${t.fill}\nдоп.опция: ${t.adds?t.adds:" -"}\n----------------------\nЦена:${t.price}\nкалорийность: ${t.caloricValue}`)};changeInput(e){let t=document.querySelector(`input[value=${this.getAttribute("value")}]`),a=t.checked;"radio"==t.type?t.checked=!0:e.target!=t&&(t.checked=!t.checked),t.checked!=a&&this.dispatchEvent(new Event("change"))}}class r{constructor(e){this.type=e.type,this.name=e.name,this.fullname=e.fullname,this.price=e.price,this.caloricValue=e.caloricValue,this.checked=e.checked}getElement(){let e=document.createElement("div");return e.classList.add("hamburger__element"),e.setAttribute("value",`${this.name}`),e.insertAdjacentHTML("beforeend",`        \n            <input\n                class="${this.type}"\n                type="${"adds"==this.type?"checkbox":"radio"}" \n                name="${this.type}" ${this.checked?"checked":""}\n                price="${this.price}"\n                caloricValue="${this.caloricValue}"\n                fullname="${this.fullname}"\n                value="${this.name}">\n            <img src="img/${this.name}.png" alt="${this.fullname}" value="${this.name}">\n         \n            <div class="hamburger__element-params">\n                <span value="${this.name}">Цена: ${this.price}$</span>\n                <span value="${this.name}">ККал: ${this.caloricValue}</span>\n            </div>`),e}}class i{constructor(){this.price=0,this.caloricValue=0,this.create()}create(){for(let e of document.forms.hamb.elements)e.checked&&(this[e.name]=e.getAttribute("fullname"),this.price+=+e.getAttribute("price"),this.caloricValue+=+e.getAttribute("caloricValue"));console.log(this),document.querySelector("#totalCalories").innerHTML=this.caloricValue,document.querySelector("#totalPrice").innerHTML=this.price+"Р"}}new Vue({el:"#page",data:{pages:[{name:"Главная",active:!0},{name:"Каталог",active:!1},{name:"Поесть",active:!1},{name:"Отзыв..",active:!1}],isVisibleCart:!1,isMobile:{menuIcon:!1,menuVisible:!0},goods:[],filteredGoods:[],cart:[],errors:[]},methods:{getJSON(e,t){let a=t?{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)}:null;return fetch(e,a).then((e=>e.json())).catch((e=>this.errors.push("Ошибка при загрузке данных")))},loadData(e){this.getJSON(e).then((t=>{"/catalog"==e?(this.goods=[...t],this.filteredGoods=[...this.goods]):"/cart"==e&&(this.cart=[...t])})).catch((t=>this.errors.push("Ошибка при загрузке "+e)))},setMenu(){this.isMobile.menuVisible=window.innerWidth>768,this.isMobile.menuIcon=window.innerWidth<=768}},mounted(){this.loadData("/cart"),this.setMenu(),window.addEventListener("resize",this.setMenu)}})})();